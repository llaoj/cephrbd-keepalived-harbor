## 环境要求

- kernel>=4.5
- ceph-common version >= ceph version

## 方案介绍

部署两个Harbor实例来实现高可用, 存储使用CephRBD, RBD块设备是独占存储, 性能上要优于NAS存储.
这意味着同时只有一个实例在正常运行对外提供服务. 单实例的优点显而易见, RBD带来的性能优势, 部署上简单. 因为是公司内网使用, 对Harbor的并发读取操作很低, 极端情况下(几乎不可能出现)也只能有几千的并发. 所以单Harbor实例提供服务是可行的.
但是单实例存在一个单点故障的问题, 为了解决这个问题, 我们借助Keepalived的故障切换的能力实现故障转移. 缺点是, 在故障切换的过程中存在一定时间的服务不可用时间, 这个时间点多少取决于基础设置性能. 所以,总结来看改方案:

优势:

- RBD存储带来的性能优势
- 部署上简单易于维护和部署

缺点:

- 故障转移期间服务不可用约几分钟


## Keepalived安装配置

`/etc/keepalived/keepalived.conf`

```
! /etc/keepalived/keepalived.conf
! Configuration File for keepalived
global_defs {
    router_id HARBOR_1
    enable_script_security
}
vrrp_script check_harbor {
  script "/etc/keepalived/check_harbor.sh 10.206.99.1"
  interval 5
  weight -2
  fall 12
  rise 2
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 101
    nopreempt
    authentication {
        auth_type PASS
        auth_pass 42
    }
    virtual_ipaddress {
        10.206.99.1
    }
    track_script {
        check_harbor
    }
}
```

`/etc/keepalived/keepalived-backup.conf`

```
! /etc/keepalived/keepalived.conf
! Configuration File for keepalived
global_defs {
    router_id HARBOR_2
    enable_script_security
}
vrrp_script check_harbor {
  script "/etc/keepalived/check_harbor.sh 10.206.99.1"
  interval 5
  weight -2
  fall 12
  rise 2
}

vrrp_instance VI_1 {
    state BACKUP
    interface eth0
    virtual_router_id 51
    priority 100
    authentication {
        auth_type PASS
        auth_pass 42
    }
    virtual_ipaddress {
        10.206.99.1
    }
    track_script {
        check_harbor
    }
}
```

`/etc/keepalived/check_harbor.sh`

```shell
#!/bin/sh

VIP=$1

errorExit() {
    echo "*** $*" 1>&2
    exit 1
}

if ip addr | grep -q $VIP; then
    if curl --silent --max-time 3 http://${VIP}:8080/api/v2.0/health | grep -q unhealthy; then
        errorExit "Error GET http://${VIP}:8080/api/v2.0/health"
    fi
fi
```


## 故障转移脚本

故障转移是一个systemd服务, 定时执行指定脚本. 来判断是否发生了故障转移.

`/etc/systemd/system/harbor-failover.timer` 

```shell
[Unit]
Description=Timer to run harbor failover script

[Timer]
OnCalendar=Mon *-*-1,2,3,4,5,6,7 03:00:00

[Install]
WantedBy=multi-user.target
```

`/etc/systemd/system/harbor-failover.service`

```
[Unit]
Description=Harbor failover

[Service]
Type=oneshot
ExecStart=/usr/local/bin/harbor-failover.sh
```


`/usr/local/bin/harbor-failover.sh`


```shell

```


## Harbor的安装