#!/bin/bash

set -xe

ceph_image_spec="${CEPH_POOL_NAME}/${CEPH_IMAGE_NAME}"
root_dir="/mnt/${ceph_image_spec}"
harbor_dir="$root_dir/harbor"
data_dir="$root_dir/data"
script_dir=$(
	cd "$(dirname "${BASH_SOURCE[0]}")"
	pwd
)

ceph_conf_dir="/etc/ceph"
ceph_keyring_file="$ceph_conf_dir/ceph.client.${CEPH_USER}.keyring"

func_init() {
	# ceph config
	if [ ! -e $ceph_conf_dir ]; then
		mkdir -p "$ceph_conf_dir"
	fi
	echo -e "[client.${CEPH_USER}]\n  key=${CEPH_USER_KEY}" >"$ceph_keyring_file"
	echo -e "[global]\nmon_host=${CEPH_MON_HOST}" >$ceph_conf_dir/ceph.conf

	# load rbd kernel module
	if [ ! -d "/sys/module/rbd" ]; then
		echo "loading rbd module"
		modprobe rbd
	fi
}

func_device_unmap() {
	local mapped_device_list
	if mapped_device_list=$(rbd device list -t krbd | grep "$CEPH_POOL_NAME" | grep "$CEPH_IMAGE_NAME" | awk '{print $5}'); then
		if [ "$mapped_device_list" ]; then
			for mapped_device in $mapped_device_list; do
				# umount mapped device before unmap
				if mount -l | grep "$mapped_device"; then
					umount "$root_dir"
				fi
				echo "unmapping device $mapped_device"
				rbd device unmap "$mapped_device"
			done
		fi
	fi
}

func_device_map() {
	func_device_unmap

	local clients
	# watcher=192.168.55.2:0/2900899764 client.14844 cookie=139644428642944
	if clients=$(rbd status "$ceph_image_spec" | grep "watcher=" | awk -F "watcher=" '{print $2}' | awk '{print $1}' | uniq); then
		if [ "$clients" ]; then
			for client in $clients; do
				echo "adding $client to osd blacklist"
				ceph osd blacklist add "$client"
			done
		fi
	fi

	echo "mapping device $ceph_image_spec"
	rbd device map "$ceph_image_spec" --id="$CEPH_USER" --keyring="$ceph_keyring_file"

	if [ ! -d "$root_dir" ]; then
		mkdir -p "$root_dir"
	fi

	mapped_device=$(rbd device list | grep "$CEPH_POOL_NAME" | grep "$CEPH_IMAGE_NAME" | awk '{print $5}' | head -n 1)
	if [ "$mapped_device" ]; then
		# make file system
		if ! blkid "$mapped_device"; then
			mkfs.ext4 "$mapped_device"
		fi

		# fix: structure needs cleaning
		e2fsck -vyf "$mapped_device"

		echo "mounting $mapped_device to $root_dir"
		mount -vn "$mapped_device" "$root_dir"
	fi

	if [ "$clients" ]; then
		for client in $clients; do
			echo "removing $client from osd blacklist"
			ceph osd blacklist rm "$client"
		done
	fi
}

func_harbor_install() {
	local harbor_yml_file="$script_dir"/harbor.yml
	if [ ! -e "$harbor_yml_file" ]; then
		echo "harbor config file <$harbor_yml_file> not found!"
		exit
	fi
	sed -i "s/{{ HOSTNAME }}/${HARBOR_VIP}/" "$harbor_yml_file"
	sed -i "s/{{ DATA_VOLUME }}/${data_dir//\//\\/}/" "$harbor_yml_file"
	local install_sh_file="$harbor_dir"/install.sh
	if [ ! -e "$install_sh_file" ]; then
		wget -q https://llaoj.oss-cn-beijing.aliyuncs.com/harbor-assistant/harbor-offline-installer-"${HARBOR_VERSION}".tgz -O - | tar xzvf - -C "$root_dir"
	fi

	# fix: OSError: [Errno 74] Bad message: '/config/shared/trust-certificates'
	rm -rf "$harbor_dir"/common
	# fix: Wrong signature trying to load DB from file
	rm -rf "$data_dir"/redis/*.rdb

	cp "$harbor_yml_file" "$harbor_dir"
	"$harbor_dir"/install.sh
}

func_status() {
	if [ "$(docker ps -qf name=harbor*)" ]; then
		echo "harbor is running..."
		return 0
	else
		echo "harbor is not running!"
		return 1
	fi
}

func_start() {
	func_device_map
	func_harbor_install
}

func_stop() {
	cd "$harbor_dir" || return
	if func_status; then
		docker-compose down -v
	fi
	func_device_unmap
}

case "$1" in
	init)
		func_init
		;;
	status)
		func_status
		;;
	start)
		func_start
		;;
	stop)
		func_stop
		;;
	*)
		echo "Usage: harborctl init | status | start | stop"
		;;
esac
