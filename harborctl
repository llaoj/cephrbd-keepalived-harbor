#!/bin/bash

set -xe

ceph_image_spec="${CEPH_POOL_NAME}/${CEPH_IMAGE_NAME}"
root_dir="/mnt/${ceph_image_spec}"
harbor_dir="$root_dir/harbor"
script_dir=$(
	cd "$(dirname "${BASH_SOURCE[0]}")"
	pwd
)

# ceph config
ceph_keyring_file="/etc/ceph/ceph.client.${CEPH_USER}.keyring"
echo -e "[client.${CEPH_USER}]\n  key=${CEPH_USER_KEY}" >"$ceph_keyring_file"
echo -e "[global]\nmon_host=${CEPH_MON_HOST}" >/etc/ceph/ceph.conf
echo "$ceph_image_spec id=${CEPH_USER},keyring=${ceph_keyring_file}" >/etc/ceph/rbdmap

# load rbd kernel module
if [ ! -d "/sys/module/rbd" ]; then
	echo "loading rbd module"
	modprobe rbd || exit $?
fi

func_device_unmap() {
	local mapped_device_list
	if mapped_device_list=$(rbd device list -t krbd | grep "$CEPH_POOL_NAME" | grep "$CEPH_IMAGE_NAME" | awk '{print $5}'); then
		if [ "$mapped_device_list" ]; then
			for mapped_device in $mapped_device_list; do
				# umount mapped device before unmap
				if mount -l | grep "$mapped_device"; then
					umount "$root_dir" || exit $?
				fi
				echo "unmapping device $mapped_device"
				rbd device unmap "$mapped_device" || exit $?
			done
		fi
	fi
}

func_device_map() {
	func_device_unmap

	local clients
	# watcher=192.168.55.2:0/2900899764 client.14844 cookie=139644428642944
	if clients=$(rbd status "$ceph_image_spec" | grep "watcher=" | awk -F "watcher=" '{print $2}' | awk '{print $1}' | uniq); then
		if [ "$clients" ]; then
			for client in $clients; do
				echo "adding $client to osd blacklist"
				ceph osd blacklist add "$client" || exit $?
			done
		fi
	fi

	echo "mapping device $ceph_image_spec"
	rbd device map "$ceph_image_spec" --id="$CEPH_USER" --keyring="$ceph_keyring_file" || exit $?

	if [ -d "$root_dir" ]; then
		mkdir -p "$root_dir" || exit $?
	fi

	mapped_device=$(rbd device list | grep "$CEPH_POOL_NAME" | grep "$CEPH_IMAGE_NAME" | awk '{print $5}' | head -n 1)
	if [ "$mapped_device" ]; then
		# make file system
		if ! blkid "$mapped_device"; then
			mkfs.ext4 "$mapped_device" || exit $?
		fi
		echo "mounting $mapped_device to $root_dir"
		mount -vn "$mapped_device" "$root_dir" || exit $?
	fi

	if [ "$clients" ]; then
		for client in $clients; do
			echo "removing $client from osd blacklist"
			ceph osd blacklist rm "$client" || exit $?
		done
	fi
}

func_harbor_install() {
	wget https://llaoj.oss-cn-beijing.aliyuncs.com/harbor-assistant/harbor-offline-installer-"${HARBOR_VERSION}".tgz -O - | tar xzvf - -C "$root_dir"
	local harbor_yml_file="$script_dir"/harbor.yml
	sed -i "s/^hostname:.*/hostname: ${HARBOR_VIP}/" "$harbor_yml_file"
	sed -i "s/^data_volume:.*/data_volume: ${root_dir}\/data/" "$harbor_yml_file"
	cp "$harbor_yml_file" "$harbor_dir"
	source "$harbor_dir"/install.sh
}

func_status() {
	if [ "$(pgrep -cf harbor)" -gt 0 ]; then
		echo "harbor is running..."
		return 0
	else
		echo "harbor is not running!"
		return 1
	fi
}

func_start() {
	func_device_map
	if [ -d "$harbor_dir" ]; then
		func_harbor_install
	fi
	cd "$harbor_dir" || return
	if [ "$(func_status)" ]; then
		docker-compose down -v
	fi
	docker-compose up -d
}

func_stop() {
	cd "$harbor_dir" || return
	if [ "$(func_status)" ]; then
		docker-compose down -v
	fi
	func_device_unmap
}

case "$1" in
	status)
		func_status
		;;
	start)
		func_start
		;;
	stop)
		func_stop
		;;
	*)
		echo "Usage: harborctl status | start | stop"
		;;
esac
